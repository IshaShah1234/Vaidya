<div class="topics-filter">
                        <button type="button" class="filter-btn active" data-category="all">All Categories</button>
                        <button type="button" class="filter-btn" data-category="emergency">üö® Emergency</button>
                        <button type="button" class="filter-btn" data-category="chronic">üè• Chronic</button>
                        <button type="button" class="filter-btn" data-category="mental">üß† Mental Health</button>
                        <button type="button" class="filter-btn" data-category="women">üë©‚Äç‚öïÔ∏è Women's Health</button>
                        <button type="button" class="filter-btn" data-category="pediatric">üë∂ Pediatric</button>
                    </div>
                    
                    <div class="quick-topics" id="quickTopics">
                        <!-- Topics will be loaded dynamically -->
                    </div>
                </div>
                
                <!-- Loading State -->
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                    <div class="loading-text">Generating your enhanced blog post...</div>
                    <div class="loading-subtext">This includes AI images, videos, and interactive elements. Please wait 60-90 seconds.</div>
                    <div class="progress-container">
                        <div class="progress-bar" id="progressBar"></div>
                    </div>
                </div>
                
                <!-- Success Result -->
                <div class="result" id="result">
                    <h3>‚úÖ Enhanced Blog Generated Successfully!</h3>
                    <div id="resultContent"></div>
                    <div class="result-actions">
                        <a id="viewBlogLink" href="#" target="_blank" class="btn-secondary">üëÅÔ∏è View Blog</a>
                        <a id="previewLink" href="#" class="btn-secondary">üìñ Preview</a>
                        <button onclick="loadAnalytics()" class="btn-secondary">üìä View Analytics</button>
                        <button onclick="shareResult()" class="btn-secondary">üì§ Share</button>
                    </div>
                </div>
                
                <!-- Error State -->
                <div class="error" id="error">
                    <h3>‚ùå Generation Error</h3>
                    <div id="errorContent"></div>
                    <div class="error-actions">
                        <button onclick="retryGeneration()" class="btn-secondary">üîÑ Try Again</button>
                        <button onclick="reportIssue()" class="btn-secondary">üêõ Report Issue</button>
                    </div>
                </div>
            </div>
            
            <!-- Analytics Dashboard -->
            <div class="analytics-section" id="analyticsSection" style="display: none;">
                <h2 class="section-title">üìä Analytics Dashboard</h2>
                <div class="analytics-grid" id="analyticsGrid">
                    <!-- Analytics cards will be loaded here -->
                </div>
            </div>
            
            <!-- Generated Blogs Section -->
            <div class="generator-section">
                <div class="generator-header">
                    <h2>üìö Your Generated Blogs</h2>
                    <p class="subtitle">Manage and view your medical blog collection</p>
                </div>
                
                <div class="blog-controls">
                    <div class="search-filters">
                        <input type="text" id="blogSearch" placeholder="üîç Search blogs..." style="flex: 1; margin-right: 10px;">
                        <select id="categoryFilter" style="margin-right: 10px;">
                            <option value="">All Categories</option>
                            <option value="cardiology">Cardiology</option>
                            <option value="endocrinology">Endocrinology</option>
                            <option value="neurology">Neurology</option>
                            <option value="psychiatry">Mental Health</option>
                        </select>
                        <button onclick="exportBlogs()" class="btn-secondary">üì§ Export</button>
                    </div>
                </div>
                
                <div id="blogsList" class="blogs-list">
                    <!-- Blogs will be loaded here -->
                </div>
                
                <div class="pagination" id="pagination" style="display: none;">
                    <!-- Pagination will be added here -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // Enhanced JavaScript with new features
        let lastTopic = '';
        let lastKeywords = '';
        let currentPage = 1;
        let isGenerating = false;
        
        // Medical topic suggestions database
        const topicSuggestions = {
            emergency: [
                {
                    title: "Heart attack warning signs every adult should know",
                    keywords: "heart attack symptoms, chest pain, cardiac emergency",
                    urgency: "high",
                    category: "cardiology"
                },
                {
                    title: "Stroke symptoms and the critical golden hour",
                    keywords: "stroke symptoms, brain attack, FAST test, neurological emergency",
                    urgency: "high",
                    category: "neurology"
                },
                {
                    title: "Severe allergic reaction signs and emergency response",
                    keywords: "anaphylaxis, allergic reaction, epinephrine, allergy emergency",
                    urgency: "high",
                    category: "immunology"
                }
            ],
            chronic: [
                {
                    title: "Diabetes symptoms and early warning signs",
                    keywords: "diabetes symptoms, blood sugar symptoms, early diabetes signs",
                    urgency: "medium",
                    category: "endocrinology"
                },
                {
                    title: "High blood pressure: silent killer symptoms",
                    keywords: "high blood pressure, hypertension symptoms, blood pressure control",
                    urgency: "medium",
                    category: "cardiology"
                },
                {
                    title: "Thyroid disorders: recognizing the signs",
                    keywords: "thyroid symptoms, hypothyroidism, hyperthyroidism",
                    urgency: "medium",
                    category: "endocrinology"
                }
            ],
            mental: [
                {
                    title: "Depression signs and when to seek help",
                    keywords: "depression symptoms, mental health, mood disorders",
                    urgency: "medium",
                    category: "psychiatry"
                },
                {
                    title: "Anxiety disorders: types and treatments",
                    keywords: "anxiety symptoms, panic attacks, anxiety management",
                    urgency: "medium",
                    category: "psychiatry"
                },
                {
                    title: "Recognizing burnout syndrome",
                    keywords: "burnout symptoms, work stress, mental exhaustion",
                    urgency: "medium",
                    category: "occupational health"
                }
            ],
            women: [
                {
                    title: "PCOS symptoms every woman should recognize",
                    keywords: "PCOS symptoms, polycystic ovary syndrome, hormonal imbalance",
                    urgency: "medium",
                    category: "gynecology"
                },
                {
                    title: "Menopause symptoms and management",
                    keywords: "menopause symptoms, hot flashes, hormone therapy",
                    urgency: "low",
                    category: "gynecology"
                },
                {
                    title: "Endometriosis: painful periods explained",
                    keywords: "endometriosis symptoms, pelvic pain, painful periods",
                    urgency: "medium",
                    category: "gynecology"
                }
            ],
            pediatric: [
                {
                    title: "Common childhood illnesses and warning signs",
                    keywords: "childhood illnesses, pediatric symptoms, kids health",
                    urgency: "medium",
                    category: "pediatrics"
                },
                {
                    title: "Childhood vaccines: schedule and importance",
                    keywords: "childhood vaccines, immunization schedule, vaccine safety",
                    urgency: "low",
                    category: "pediatrics"
                },
                {
                    title: "Recognizing autism spectrum disorder early",
                    keywords: "autism symptoms, developmental delays, ASD signs",
                    urgency: "medium",
                    category: "developmental pediatrics"
                }
            ]
        };
        
        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            loadTopicSuggestions('all');
            loadBlogs();
            updateStats();
            setupEventListeners();
        });

        function initializeApp() {
            // Load saved form data
            const savedTopic = localStorage.getItem('blog_topic');
            const savedKeywords = localStorage.getItem('blog_keywords');
            
            if (savedTopic) document.getElementById('topic').value = savedTopic;
            if (savedKeywords) document.getElementById('keywords').value = savedKeywords;
            
            // Setup auto-save
            document.getElementById('topic').addEventListener('input', function() {
                localStorage.setItem('blog_topic', this.value);
            });
            
            document.getElementById('keywords').addEventListener('input', function() {
                localStorage.setItem('blog_keywords', this.value);
            });
        }

        function setupEventListeners() {
            // Form submission
            document.getElementById('blogForm').addEventListener('submit', handleFormSubmit);
            
            // Topic filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    loadTopicSuggestions(this.dataset.category);
                });
            });
            
            // Search and filter
            document.getElementById('blogSearch')?.addEventListener('input', debounce(searchBlogs, 300));
            document.getElementById('categoryFilter')?.addEventListener('change', filterBlogs);
            
            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                    e.preventDefault();
                    if (!isGenerating) {
                        document.getElementById('blogForm').dispatchEvent(new Event('submit'));
                    }
                }
            });
        }

        async function handleFormSubmit(e) {
            e.preventDefault();
            
            if (isGenerating) return;
            
            const topic = document.getElementById('topic').value.trim();
            const keywords = document.getElementById('keywords').value.split(',').map(k => k.trim()).filter(k => k);
            const category = document.getElementById('category').value;
            
            if (!topic) {
                showError('Please enter a medical topic or question.');
                return;
            }
            
            // Get options
            const options = {
                includeImages: document.getElementById('includeImages').checked,
                includeVideos: document.getElementById('includeVideos').checked,
                includeInteractiveElements: document.getElementById('includeInteractive').checked,
                includeSocialSharing: document.getElementById('includeSocial').checked,
                category: category
            };
            
            // Store for retry functionality
            lastTopic = topic;
            lastKeywords = keywords;
            
            await generateBlog(topic, keywords, options);
        }

        async function generateBlog(topic, keywords, options = {}) {
            if (isGenerating) return;
            
            isGenerating = true;
            showLoading();
            
            const startTime = Date.now();
            let progressInterval;
            
            try {
                // Start progress simulation
                startProgressSimulation();
                
                const response = await fetch('/api/generate-blog', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ topic, keywords, options })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const endTime = Date.now();
                    const duration = Math.round((endTime - startTime) / 1000);
                    
                    showSuccess(data, duration);
                    
                    // Clear form
                    document.getElementById('topic').value = '';
                    document.getElementById('keywords').value = '';
                    localStorage.removeItem('blog_topic');
                    localStorage.removeItem('blog_keywords');
                    
                    // Refresh data
                    setTimeout(() => {
                        loadBlogs();
                        updateStats();
                    }, 1000);
                } else {
                    throw new Error(data.error || 'Unknown error occurred');
                }
            } catch (error) {
                console.error('Generation error:', error);
                showError(error.message || 'Failed to generate blog. Please try again.');
            } finally {
                hideLoading();
                isGenerating = false;
                clearInterval(progressInterval);
            }
        }

        function startProgressSimulation() {
            const progressBar = document.getElementById('progressBar');
            let progress = 0;
            
            const interval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 95) progress = 95;
                progressBar.style.width = progress + '%';
                
                if (!isGenerating) {
                    clearInterval(interval);
                    progressBar.style.width = '100%';
                }
            }, 1000);
            
            return interval;
        }

        function showLoading() {
            document.getElementById('loading').style.display = 'block';
            document.getElementById('result').style.display = 'none';
            document.getElementById('error').style.display = 'none';
            document.getElementById('generateBtn').disabled = true;
            document.getElementById('btnText').textContent = '‚è≥ Generating...';
        }

        function hideLoading() {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('generateBtn').disabled = false;
            document.getElementById('btnText').textContent = 'üöÄ Generate Enhanced Blog Post';
            document.getElementById('progressBar').style.width = '0%';
        }

        function showSuccess(data, duration) {
            const resultContent = document.getElementById('resultContent');
            const blog = data.blog;
            
            resultContent.innerHTML = `
                <div style="margin-bottom: 20px;">
                    <h4 style="color: var(--primary-color); margin-bottom: 10px;">${blog.title}</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 15px 0;">
                        <div><strong>‚è±Ô∏è Generation Time:</strong> ${duration}s</div>
                        <div><strong>üè• Category:</strong> ${blog.category || 'General'}</div>
                        <div><strong>üìñ Reading Time:</strong> ${blog.readingTime || '8'} min</div>
                        <div><strong>‚ö†Ô∏è Urgency:</strong> ${blog.urgencyLevel || 'Medium'}</div>
                    </div>
                    <div style="margin-top: 15px;">
                        <strong>üîç Keywords:</strong> ${blog.keywords.join(', ')}
                    </div>
                    <div style="margin-top: 15px;">
                        <strong>üé® Features:</strong>
                        ${blog.features.hasImages ? 'üñºÔ∏è Images' : ''}
                        ${blog.features.hasVideos ? 'üì∫ Videos' : ''}
                        ${blog.features.hasInteractiveElements ? 'üéØ Interactive' : ''}
                    </div>
                </div>
            `;
            
            document.getElementById('viewBlogLink').href = blog.url;
            document.getElementById('previewLink').href = `/api/blogs/${blog.url.split('/').pop()}/preview`;
            document.getElementById('result').style.display = 'block';
        }

        function showError(message) {
            document.getElementById('errorContent').innerHTML = `<p>${message}</p>`;
            document.getElementById('error').style.display = 'block';
            document.getElementById('result').style.display = 'none';
        }

        function retryGeneration() {
            if (lastTopic) {
                const options = {
                    includeImages: document.getElementById('includeImages').checked,
                    includeVideos: document.getElementById('includeVideos').checked,
                    includeInteractiveElements: document.getElementById('includeInteractive').checked,
                    includeSocialSharing: document.getElementById('includeSocial').checked
                };
                generateBlog(lastTopic, lastKeywords, options);
            }
        }

        function loadTopicSuggestions(category) {
            const container = document.getElementById('quickTopics');
            let topics = [];
            
            if (category === 'all') {
                Object.values(topicSuggestions).forEach(categoryTopics => {
                    topics.push(...categoryTopics);
                });
            } else if (topicSuggestions[category]) {
                topics = topicSuggestions[category];
            }
            
            container.innerHTML = topics.map(topic => `
                <div class="topic-card" onclick="fillTopic('${topic.title}', '${topic.keywords}', '${topic.category}')">
                    <div class="topic-title">${topic.title}</div>
                    <div class="topic-meta">
                        <span>üè• ${topic.category}</span>
                        <span class="urgency-badge urgency-${topic.urgency}">${topic.urgency.toUpperCase()}</span>
                    </div>
                </div>
            `).join('');
        }

        function fillTopic(title, keywords, category) {
            document.getElementById('topic').value = title;
            document.getElementById('keywords').value = keywords;
            if (category) {
                document.getElementById('category').value = category;
            }
            
            // Visual feedback
            const topicInput = document.getElementById('topic');
            topicInput.style.background = 'linear-gradient(135deg, #e8f5e8 0%, #d4edda 100%)';
            setTimeout(() => {
                topicInput.style.background = '';
            }, 1500);
            
            // Scroll to form
            document.getElementById('blogForm').scrollIntoView({ behavior: 'smooth' });
        }

        async function loadBlogs() {
            try {
                const params = new URLSearchParams({
                    page: currentPage,
                    limit: 10,
                    search: document.getElementById('blogSearch')?.value || '',
                    category: document.getElementById('categoryFilter')?.value || ''
                });
                
                const response = await fetch(`/api/blogs?${params}`);
                const data = await response.json();
                
                displayBlogs(data.blogs);
                updatePagination(data.pagination);
                
            } catch (error) {
                console.error('Error loading blogs:', error);
                document.getElementById('blogsList').innerHTML = `
                    <div style="text-align: center; padding: 40px; color: #e74c3c;">
                        <h3>‚ö†Ô∏è Error Loading Blogs</h3>
                        <p>Please refresh the page or try again later.</p>
                        <button onclick="loadBlogs()" class="btn-secondary" style="margin-top: 15px;">üîÑ Retry</button>
                    </div>
                `;
            }
        }

        function displayBlogs(blogs) {
            const container = document.getElementById('blogsList');
            
            if (blogs.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 60px; color: #6c757d;">
                        <div style="font-size: 4rem; margin-bottom: 20px;">üìù</div>
                        <h3>No blogs found</h3>
                        <p>Create your first enhanced blog using the generator above!</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = blogs.map(blog => `
                <div class="blog-card" style="background: white; padding: 25px; border-radius: 12px; margin-bottom: 20px; box-shadow: 0 5px 15px rgba(0,0,0,0.08); border: 2px solid #f1f3f5; transition: all 0.3s ease;">
                    <div class="blog-header" style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 15px;">
                        <div style="flex: 1;">
                            <h3 style="color: var(--primary-color); margin-bottom: 8px; font-size: 1.2rem;">${formatBlogTitle(blog.name)}</h3>
                            <div style="display: flex; gap: 15px; flex-wrap: wrap; font-size: 0.9rem; color: #6c757d;">
                                <span>üìÖ ${formatDate(blog.created)}</span>
                                <span>üè• ${blog.medicalCategory || 'General'}</span>
                                <span class="urgency-badge urgency-${blog.urgencyLevel || 'medium'}">${(blog.urgencyLevel || 'medium').toUpperCase()}</span>
                                <span>üìñ ${blog.readingTime || '8'} min read</span>
                            </div>
                        </div>
                        <div class="blog-actions" style="display: flex; gap: 10px;">
                            <a href="${blog.url}" target="_blank" class="btn-secondary" style="padding: 8px 12px; font-size: 0.9rem;">üëÅÔ∏è View</a>
                            <button onclick="previewBlog('${blog.filename}')" class="btn-secondary" style="padding: 8px 12px; font-size: 0.9rem;">üìñ Preview</button>
                            <button onclick="deleteBlog('${blog.filename}')" class="btn-secondary" style="padding: 8px 12px; font-size: 0.9rem; background: #ff6b6b; color: white; border-color: #ff6b6b;">üóëÔ∏è</button>
                        </div>
                    </div>
                    
                    ${blog.keywords ? `
                        <div style="margin-top: 12px;">
                            <strong style="color: #495057; font-size: 0.9rem;">üîç Keywords:</strong>
                            <div style="margin-top: 5px;">
                                ${blog.keywords.map(keyword => `<span style="background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 12px; font-size: 0.8rem; margin-right: 6px; display: inline-block; margin-bottom: 4px;">${keyword}</span>`).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    ${blog.quickFacts ? `
                        <div style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid var(--secondary-color);">
                            <strong style="color: #495057; font-size: 0.9rem;">üìã Quick Facts:</strong>
                            <ul style="margin: 8px 0 0 20px; font-size: 0.9rem; color: #6c757d;">
                                ${blog.quickFacts.slice(0, 3).map(fact => `<li>${fact}</li>`).join('')}
                            </ul>
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }

        function updatePagination(pagination) {
            const container = document.getElementById('pagination');
            
            if (pagination.pages <= 1) {
                container.style.display = 'none';
                return;
            }
            
            container.style.display = 'flex';
            container.style.justifyContent = 'center';
            container.style.gap = '10px';
            container.style.marginTop = '30px';
            
            let paginationHTML = '';
            
            // Previous button
            if (pagination.hasPrev) {
                paginationHTML += `<button onclick="changePage(${pagination.current - 1})" class="btn-secondary">‚Äπ Previous</button>`;
            }
            
            // Page numbers
            for (let i = Math.max(1, pagination.current - 2); i <= Math.min(pagination.pages, pagination.current + 2); i++) {
                const isActive = i === pagination.current;
                paginationHTML += `<button onclick="changePage(${i})" class="btn-secondary ${isActive ? 'active' : ''}" style="${isActive ? 'background: var(--primary-color); color: white;' : ''}">${i}</button>`;
            }
            
            // Next button
            if (pagination.hasNext) {
                paginationHTML += `<button onclick="changePage(${pagination.current + 1})" class="btn-secondary">Next ‚Ä∫</button>`;
            }
            
            container.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            loadBlogs();
        }

        async function updateStats() {
            try {
                const response = await fetch('/api/analytics');
                const data = await response.json();
                
                document.getElementById('totalBlogs').textContent = data.totalBlogs || 0;
                document.getElementById('todayBlogs').textContent = data.todayBlogs || 0;
                
                // Calculate average generation time (simulated)
                const avgTime = data.totalBlogs > 0 ? '~45s' : '~45s';
                document.getElementById('avgTime').textContent = avgTime;
                
                // Calculate SEO score based on features
                let seoScore = 85; // Base score
                if (data.featuresUsage.withImages > 0) seoScore += 5;
                if (data.featuresUsage.withVideos > 0) seoScore += 5;
                if (Object.keys(data.categoriesDistribution).length > 3) seoScore += 5;
                
                document.getElementById('seoScore').textContent = Math.min(100, seoScore);
                
            } catch (error) {
                console.error('Error updating stats:', error);
            }
        }

        async function loadAnalytics() {
            try {
                const response = await fetch('/api/analytics');
                const data = await response.json();
                
                const analyticsSection = document.getElementById('analyticsSection');
                const analyticsGrid = document.getElementById('analyticsGrid');
                
                analyticsGrid.innerHTML = `
                    <div class="analytics-card">
                        <div class="analytics-value">${data.totalBlogs}</div>
                        <div class="analytics-label">Total Blogs</div>
                    </div>
                    <div class="analytics-card">
                        <div class="analytics-value">${data.weeklyBlogs}</div>
                        <div class="analytics-label">This Week</div>
                    </div>
                    <div class="analytics-card">
                        <div class="analytics-value">${data.featuresUsage.withImages}</div>
                        <div class="analytics-label">With Images</div>
                    </div>
                    <div class="analytics-card">
                        <div class="analytics-value">${data.featuresUsage.withVideos}</div>
                        <div class="analytics-label">With Videos</div>
                    </div>
                    <div class="analytics-card">
                        <div class="analytics-value">${Object.keys(data.categoriesDistribution).length}</div>
                        <div class="analytics-label">Categories</div>
                    </div>
                    <div class="analytics-card">
                        <div class="analytics-value">${data.avgReadingTime}min</div>
                        <div class="analytics-label">Avg Reading Time</div>
                    </div>
                `;
                
                analyticsSection.style.display = 'block';
                analyticsSection.scrollIntoView({ behavior: 'smooth' });
                
            } catch (error) {
                console.error('Error loading analytics:', error);
                showError('Failed to load analytics data.');
            }
        }

        async function previewBlog(filename) {
            try {
                const response = await fetch(`/api/blogs/${filename}/preview`);
                const data = await response.json();
                
                if (data.success) {
                    const modal = document.createElement('div');
                    modal.style.cssText = `
                        position: fixed; top: 0; left: 0; right: 0; bottom: 0;
                        background: rgba(0,0,0,0.8); z-index: 1000;
                        display: flex; align-items: center; justify-content: center;
                        padding: 20px;
                    `;
                    
                    modal.innerHTML = `
                        <div style="background: white; border-radius: 15px; padding: 30px; max-width: 600px; width: 100%; max-height: 80vh; overflow-y: auto;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                                <h3 style="color: var(--primary-color);">${data.title}</h3>
                                <button onclick="this.closest('div').style.display='none'" style="background: none; border: none; font-size: 1.5rem; cursor: pointer;">√ó</button>
                            </div>
                            <div style="color: #6c757d; line-height: 1.6;">${data.preview}</div>
                            <div style="margin-top: 20px; text-align: center;">
                                <a href="${data.fullUrl}" target="_blank" class="btn-primary" style="width: auto; display: inline-block;">View Full Blog</a>
                            </div>
                        </div>
                    `;
                    
                    document.body.appendChild(modal);
                    
                    modal.addEventListener('click', function(e) {
                        if (e.target === modal) {
                            document.body.removeChild(modal);
                        }
                    });
                }
            } catch (error) {
                console.error('Error previewing blog:', error);
                showError('Failed to load blog preview.');
            }
        }

        async function deleteBlog(filename) {
            if (!confirm('Are you sure you want to delete this blog?')) return;
            
            try {
                const response = await fetch(`/api/blogs/${filename}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    loadBlogs();
                    updateStats();
                } else {
                    showError('Failed to delete blog.');
                }
            } catch (error) {
                console.error('Error deleting blog:', error);
                showError('Failed to delete blog.');
            }
        }

        async function exportBlogs() {
            try {
                const response = await fetch('/api/export/blogs');
                const blob = await response.blob();
                
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `vaidya-blogs-${Date.now()}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error exporting blogs:', error);
                showError('Failed to export blogs.');
            }
        }

        function shareResult() {
            const blog = document.getElementById('viewBlogLink').href;
            if (navigator.share) {
                navigator.share({
                    title: 'Check out this medical blog I generated!',
                    text: 'I just created a professional medical blog with AI-generated images and interactive features using Vaidya.AI Blog Generator.',
                    url: blog
                });
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(blog).then(() => {
                    alert('Blog URL copied to clipboard!');
                });
            }
        }

        function reportIssue() {
            const issueData = {
                timestamp: new Date().toISOString(),
                topic: lastTopic,
                keywords: lastKeywords,
                userAgent: navigator.userAgent,
                error: document.getElementById('errorContent').textContent
            };
            
            const subject = encodeURIComponent('Blog Generation Issue Report');
            const body = encodeURIComponent(`Issue Report:\n\n${JSON.stringify(issueData, null, 2)}`);
            
            window.open(`mailto:support@vaidya.ai?subject=${subject}&body=${body}`);
        }

        function searchBlogs() {
            currentPage = 1;
            loadBlogs();
        }

        function filterBlogs() {
            currentPage = 1;
            loadBlogs();
        }

        // Utility functions
        function formatBlogTitle(filename) {
            return filename
                .replace(/-/g, ' ')
                .replace(/\b\w/g, l => l.toUpperCase())
                .replace('.html', '');
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffTime = Math.abs(now - date);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            if (diffDays === 1) return 'Today';
            if (diffDays === 2) return 'Yesterday';
            if (diffDays <= 7) return `${diffDays - 1} days ago`;
            
            return date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric'
            });
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Advanced features
        function toggleDarkMode() {
            document.body.classList.toggle('dark-mode');
            localStorage.setItem('darkMode', document.body.classList.contains('dark-mode'));
        }

        function enableNotifications() {
            if ('Notification' in window) {
                Notification.requestPermission().then(permission => {
                    if (permission === 'granted') {
                        localStorage.setItem('notificationsEnabled', 'true');
                    }
                });
            }
        }

        function showNotification(title, message) {
            if (localStorage.getItem('notificationsEnabled') === 'true' && 'Notification' in window) {
                new Notification(title, {
                    body: message,
                    icon: '/assets/favicon.ico'
                });
            }
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Alt + N for new blog
            if (e.altKey && e.key === 'n') {
                e.preventDefault();
                document.getElementById('topic').focus();
            }
            
            // Alt + S for search
            if (e.altKey && e.key === 's') {
                e.preventDefault();
                document.getElementById('blogSearch')?.focus();
            }
            
            // Alt + A for analytics
            if (e.altKey && e.key === 'a') {
                e.preventDefault();
                loadAnalytics();
            }
            
            // Escape to close modals
            if (e.key === 'Escape') {
                const modals = document.querySelectorAll('[style*="position: fixed"]');
                modals.forEach(modal => {
                    if (modal.style.display !== 'none') {
                        modal.style.display = 'none';
                    }
                });
            }
        });

        // Performance monitoring
        function trackPerformance() {
            if ('performance' in window) {
                window.addEventListener('load', () => {
                    setTimeout(() => {
                        const perfData = performance.getEntriesByType('navigation')[0];
                        console.log('Page Load Time:', Math.round(perfData.loadEventEnd - perfData.loadEventStart), 'ms');
                    }, 0);
                });
            }
        }

        // Initialize performance tracking
        trackPerformance();

        // Service Worker registration for PWA features
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }

        // Auto-save draft functionality
        let autoSaveInterval;
        
        function startAutoSave() {
            autoSaveInterval = setInterval(() => {
                const topic = document.getElementById('topic').value;
                const keywords = document.getElementById('keywords').value;
                
                if (topic || keywords) {
                    localStorage.setItem('draft_topic', topic);
                    localStorage.setItem('draft_keywords', keywords);
                    localStorage.setItem('draft_timestamp', Date.now());
                }
            }, 30000); // Save every 30 seconds
        }

        function restoreDraft() {
            const draftTopic = localStorage.getItem('draft_topic');
            const draftKeywords = localStorage.getItem('draft_keywords');
            const draftTimestamp = localStorage.getItem('draft_timestamp');
            
            if (draftTopic || draftKeywords) {
                const timeDiff = Date.now() - parseInt(draftTimestamp);
                const hoursSince = timeDiff / (1000 * 60 * 60);
                
                if (hoursSince < 24) { // Only restore if less than 24 hours old
                    if (confirm('Found a saved draft. Would you like to restore it?')) {
                        document.getElementById('topic').value = draftTopic || '';
                        document.getElementById('keywords').value = draftKeywords || '';
                    }
                }
            }
        }

        // Initialize auto-save and draft restoration
        startAutoSave();
        restoreDraft();

        // Error boundary and crash reporting
        window.addEventListener('error', function(e) {
            console.error('Global error:', e.error);
            
            // Send error report to server (if implemented)
            if (typeof reportError === 'function') {
                reportError({
                    message: e.message,
                    filename: e.filename,
                    lineno: e.lineno,
                    colno: e.colno,
                    stack: e.error?.stack,
                    timestamp: Date.now(),
                    userAgent: navigator.userAgent
                });
            }
        });

        // Unhandled promise rejection handler
        window.addEventListener('unhandledrejection', function(e) {
            console.error('Unhandled promise rejection:', e.reason);
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            clearInterval(autoSaveInterval);
        });

        // Initialize tooltips and help system
        function initializeTooltips() {
            const tooltips = document.querySelectorAll('[data-tooltip]');
            
            tooltips.forEach(element => {
                element.addEventListener('mouseenter', function() {
                    const tooltip = document.createElement('div');
                    tooltip.className = 'tooltip';
                    tooltip.textContent = this.dataset.tooltip;
                    tooltip.style.cssText = `
                        position: absolute;
                        background: #333;
                        color: white;
                        padding: 8px 12px;
                        border-radius: 6px;
                        font-size: 0.9rem;
                        z-index: 1000;
                        pointer-events: none;
                        white-space: nowrap;
                    `;
                    
                    document.body.appendChild(tooltip);
                    
                    const rect = this.getBoundingClientRect();
                    tooltip.style.top = (rect.top - tooltip.offsetHeight - 10) + 'px';
                    tooltip.style.left = (rect.left + rect.width / 2 - tooltip.offsetWidth / 2) + 'px';
                });
                
                element.addEventListener('mouseleave', function() {
                    const tooltip = document.querySelector('.tooltip');
                    if (tooltip) {
                        document.body.removeChild(tooltip);
                    }
                });
            });
        }

        // Initialize help system
        initializeTooltips();

        // Add accessibility improvements
        function initializeAccessibility() {
            // Skip to main content link
            const skipLink = document.createElement('a');
            skipLink.href = '#main-content';
            skipLink.textContent = 'Skip to main content';
            skipLink.className = 'visually-hidden';
            skipLink.style.cssText = `
                position: absolute;
                top: 10px;
                left: 10px;
                background: var(--primary-color);
                color: white;
                padding: 10px;
                border-radius: 5px;
                text-decoration: none;
                z-index: 1001;
            `;
            
            skipLink.addEventListener('focus', function() {
                this.classList.remove('visually-hidden');
            });
            
            skipLink.addEventListener('blur', function() {
                this.classList.add('visually-hidden');
            });
            
            document.body.insertBefore(skipLink, document.body.firstChild);
            
            // Add main content ID
            document.querySelector('.main-content').id = 'main-content';
        }

        // Initialize accessibility features
        initializeAccessibility();

        console.log('ü©∫ Enhanced Vaidya.AI Blog Generator loaded successfully!');
        console.log('üéØ Features: AI Images, Interactive Videos, Advanced SEO, Analytics');
        console.log('‚å®Ô∏è Keyboard shortcuts: Ctrl+Enter (Generate), Alt+N (New), Alt+S (Search), Alt+A (Analytics)');
    </script>
</body>
</html><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enhanced Vaidya.AI Blog Generator - Medical Content with AI</title>
    <meta name="description" content="Generate professional medical blogs with AI-powered images, videos, and interactive elements. Advanced SEO optimization for healthcare content.">
    <meta name="keywords" content="medical blog generator, AI content, healthcare SEO, medical images, blog automation">
    
    <!-- Open Graph -->
    <meta property="og:title" content="Enhanced Vaidya.AI Blog Generator">
    <meta property="og:description" content="Professional medical blog generation with AI images and interactive features">
    <meta property="og:type" content="website">
    <meta property="og:image" content="/assets/og-image.jpg">
    
    <link rel="icon" href="/assets/favicon.ico" type="image/x-icon">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-color: #2c5aa0;
            --secondary-color: #4CAF50;
            --accent-color: #667eea;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --success-color: #27ae60;
            --background-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --card-shadow: 0 10px 30px rgba(0,0,0,0.1);
            --border-radius: 15px;
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: var(--background-gradient);
            min-height: 100vh;
            padding: 20px;
            color: #2c3e50;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 25px;
            box-shadow: var(--card-shadow);
            overflow: hidden;
            position: relative;
        }
        
        .container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color), var(--accent-color));
            z-index: 10;
        }
        
        .header {
            background: var(--background-gradient);
            color: white;
            padding: 50px 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="0.5" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="0.5" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.3" fill="white" opacity="0.05"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
        }
        
        .header-content {
            position: relative;
            z-index: 2;
        }
        
        .header h1 {
            font-size: clamp(2rem, 5vw, 3rem);
            font-weight: 700;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .header .subtitle {
            font-size: 1.2rem;
            opacity: 0.95;
            font-weight: 500;
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .version-badge {
            display: inline-block;
            background: rgba(255,255,255,0.2);
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            margin-top: 15px;
            backdrop-filter: blur(10px);
        }
        
        .main-content {
            padding: 40px;
            display: grid;
            gap: 30px;
        }
        
        /* Enhanced Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 25px;
            border-radius: var(--border-radius);
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border: 2px solid transparent;
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--secondary-color);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }
        
        .stat-card:hover::before {
            transform: scaleX(1);
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            border-color: var(--secondary-color);
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 8px;
            display: block;
        }
        
        .stat-label {
            color: #6c757d;
            font-weight: 500;
            font-size: 0.9rem;
        }
        
        /* Enhanced Features Grid */
        .features-section {
            margin-bottom: 40px;
        }
        
        .section-title {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }
        
        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: var(--secondary-color);
            border-radius: 2px;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
        }
        
        .feature-card {
            background: white;
            padding: 30px;
            border-radius: var(--border-radius);
            text-align: center;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
            transition: var(--transition);
            border: 2px solid transparent;
            position: relative;
            overflow: hidden;
        }
        
        .feature-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 100%;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .feature-card:hover::before {
            opacity: 1;
        }
        
        .feature-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            border-color: var(--accent-color);
        }
        
        .feature-icon {
            font-size: 3.5rem;
            margin-bottom: 20px;
            display: block;
            position: relative;
            z-index: 2;
        }
        
        .feature-title {
            color: var(--primary-color);
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 15px;
            position: relative;
            z-index: 2;
        }
        
        .feature-desc {
            color: #6c757d;
            line-height: 1.6;
            position: relative;
            z-index: 2;
        }
        
        /* Enhanced Generator Section */
        .generator-section {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 40px;
            border-radius: var(--border-radius);
            margin-bottom: 40px;
            position: relative;
            border: 2px solid #dee2e6;
        }
        
        .generator-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .generator-header h2 {
            color: var(--primary-color);
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 10px;
        }
        
        .generator-header .subtitle {
            color: #6c757d;
            font-size: 1rem;
        }
        
        .form-layout {
            display: grid;
            grid-template-columns: 1fr;
            gap: 25px;
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group.full-width {
            grid-column: 1 / -1;
        }
        
        label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .label-icon {
            font-size: 1.1rem;
        }
        
        input[type="text"], textarea, select {
            padding: 15px 18px;
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            font-size: 1rem;
            font-family: inherit;
            transition: var(--transition);
            background: white;
        }
        
        input[type="text"]:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 4px rgba(76, 175, 80, 0.1);
            transform: translateY(-2px);
        }
        
        textarea {
            min-height: 100px;
            resize: vertical;
            line-height: 1.5;
        }
        
        /* Enhanced Options Section */
        .options-section {
            background: white;
            padding: 25px;
            border-radius: var(--border-radius);
            margin: 25px 0;
            border: 2px solid #f1f3f5;
        }
        
        .options-title {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 20px;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }
        
        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 15px;
            background: #f8f9fa;
            border-radius: 10px;
            cursor: pointer;
            transition: var(--transition);
            border: 2px solid transparent;
        }
        
        .checkbox-item:hover {
            background: #e9ecef;
            border-color: var(--secondary-color);
        }
        
        .checkbox-item input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }
        
        .checkbox-label {
            font-weight: 500;
            color: #495057;
            cursor: pointer;
            flex-grow: 1;
        }
        
        .checkbox-desc {
            font-size: 0.85rem;
            color: #6c757d;
            margin-top: 4px;
        }
        
        /* Enhanced Button */
        .btn-primary {
            background: linear-gradient(135deg, var(--secondary-color) 0%, #45a049 100%);
            color: white;
            border: none;
            padding: 18px 40px;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            cursor: pointer;
            transition: var(--transition);
            width: 100%;
            position: relative;
            overflow: hidden;
            margin-top: 20px;
        }
        
        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s ease;
        }
        
        .btn-primary:hover::before {
            left: 100%;
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(76, 175, 80, 0.4);
        }
        
        .btn-primary:disabled {
            background: #adb5bd;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-primary:disabled::before {
            display: none;
        }
        
        /* Quick Topics Enhancement */
        .quick-topics-section {
            margin-top: 30px;
        }
        
        .topics-filter {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .filter-btn {
            padding: 8px 16px;
            background: white;
            border: 2px solid #dee2e6;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        .filter-btn.active, .filter-btn:hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .quick-topics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 15px;
            max-height: 300px;
            overflow-y: auto;
            padding: 10px;
        }
        
        .topic-card {
            background: white;
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: var(--transition);
            border: 2px solid #e9ecef;
            position: relative;
        }
        
        .topic-card:hover {
            border-color: var(--accent-color);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }
        
        .topic-title {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 8px;
            font-size: 0.95rem;
            line-height: 1.3;
        }
        
        .topic-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
            color: #6c757d;
        }
        
        .urgency-badge {
            padding: 3px 8px;
            border-radius: 12px;
            font-weight: 500;
            font-size: 0.75rem;
        }
        
        .urgency-high { background: #ffebee; color: #c62828; }
        .urgency-medium { background: #fff3e0; color: #ef6c00; }
        .urgency-low { background: #e8f5e8; color: #2e7d32; }
        
        /* Loading States */
        .loading {
            display: none;
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: var(--border-radius);
            margin: 20px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .spinner {
            width: 60px;
            height: 60px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--secondary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            color: #6c757d;
            font-size: 1.1rem;
            font-weight: 500;
            margin-bottom: 10px;
        }
        
        .loading-subtext {
            color: #adb5bd;
            font-size: 0.9rem;
        }
        
        /* Progress Bar */
        .progress-container {
            width: 100%;
            height: 6px;
            background: #f8f9fa;
            border-radius: 3px;
            margin: 15px 0;
            overflow: hidden;
        }
        
        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--secondary-color), var(--accent-color));
            width: 0%;
            transition: width 0.3s ease;
            border-radius: 3px;
        }
        
        /* Result and Error States */
        .result, .error {
            display: none;
            padding: 25px;
            border-radius: var(--border-radius);
            margin: 20px 0;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .result {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            border: 2px solid #28a745;
            color: #155724;
        }
        
        .error {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            border: 2px solid #dc3545;
            color: #721c24;
        }
        
        .result h3, .error h3 {
            margin-bottom: 15px;
            font-size: 1.2rem;
        }
        
        .result-actions, .error-actions {
            margin-top: 20px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .btn-secondary {
            background: white;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            transition: var(--transition);
            display: inline-block;
        }
        
        .btn-secondary:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
        }
        
        /* Analytics Dashboard */
        .analytics-section {
            background: white;
            padding: 30px;
            border-radius: var(--border-radius);
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        
        .analytics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .analytics-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            border-left: 4px solid var(--secondary-color);
        }
        
        .analytics-value {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 5px;
        }
        
        .analytics-label {
            color: #6c757d;
            font-size: 0.9rem;
            font-weight: 500;
        }
        
        /* Responsive Design */
        @media (max-width: 1024px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .features-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            }
        }
        
        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 20px;
            }
            
            .main-content {
                padding: 25px;
            }
            
            .header {
                padding: 40px 25px;
            }
            
            .header h1 {
                flex-direction: column;
                gap: 15px;
            }
            
            .stats-section {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .features-grid {
                grid-template-columns: 1fr;
            }
            
            .checkbox-group {
                grid-template-columns: 1fr;
            }
            
            .quick-topics {
                grid-template-columns: 1fr;
                max-height: 250px;
            }
            
            .topics-filter {
                justify-content: flex-start;
                overflow-x: auto;
                padding-bottom: 10px;
            }
        }
        
        @media (max-width: 480px) {
            .stats-section {
                grid-template-columns: 1fr;
            }
            
            .result-actions, .error-actions {
                flex-direction: column;
            }
            
            .btn-primary, .btn-secondary {
                width: 100%;
                text-align: center;
            }
        }
        
        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            :root {
                --background-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            }
        }
        
        /* Print styles */
        @media print {
            .loading, .generator-section, .quick-topics-section {
                display: none !important;
            }
        }
        
        /* Accessibility improvements */
        .visually-hidden {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }
        
        /* Focus indicators */
        *:focus {
            outline: 2px solid var(--secondary-color);
            outline-offset: 2px;
        }
        
        /* Reduced motion support */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="header-content">
                <h1>ü©∫ Enhanced Vaidya.AI Blog Generator</h1>
                <p class="subtitle">Professional medical blog generation with AI-powered images, interactive videos, and comprehensive SEO optimization</p>
                <span class="version-badge">‚ú® Version 2.0 - Now with AI Images & Interactive Features</span>
            </div>
        </div>
        
        <div class="main-content">
            <!-- Enhanced Stats Section -->
            <div class="stats-section">
                <div class="stat-card">
                    <span class="stat-number" id="totalBlogs">0</span>
                    <div class="stat-label">üìö Total Blogs Generated</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="todayBlogs">0</span>
                    <div class="stat-label">üåü Generated Today</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="avgTime">~45s</span>
                    <div class="stat-label">‚ö° Avg Generation Time</div>
                </div>
                <div class="stat-card">
                    <span class="stat-number" id="seoScore">95</span>
                    <div class="stat-label">üéØ SEO Score</div>
                </div>
            </div>
            
            <!-- Enhanced Features Section -->
            <div class="features-section">
                <h2 class="section-title">üöÄ Advanced Features</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <span class="feature-icon">üñºÔ∏è</span>
                        <div class="feature-title">AI-Generated Images</div>
                        <div class="feature-desc">Professional medical illustrations created with DALL-E 3 for visual engagement and better SEO rankings</div>
                    </div>
                    <div class="feature-card">
                        <span class="feature-icon">üì∫</span>
                        <div class="feature-title">Video Integration</div>
                        <div class="feature-desc">Curated YouTube medical videos and educational content to enhance user experience and time on page</div>
                    </div>
                    <div class="feature-card">
                        <span class="feature-icon">üéØ</span>
                        <div class="feature-title">Interactive Elements</div>
                        <div class="feature-desc">Symptom checkers, medical quizzes, and interactive tools to boost engagement and conversions</div>
                    </div>
                    <div class="feature-card">
                        <span class="feature-icon">‚ö°</span>
                        <div class="feature-title">Lightning Fast</div>
                        <div class="feature-desc">Generate comprehensive medical blogs in under 60 seconds with advanced AI optimization</div>
                    </div>
                    <div class="feature-card">
                        <span class="feature-icon">üîç</span>
                        <div class="feature-title">Advanced SEO</div>
                        <div class="feature-desc">Schema markup, meta optimization, keyword density analysis, and mobile-first design</div>
                    </div>
                    <div class="feature-card">
                        <span class="feature-icon">üìä</span>
                        <div class="feature-title">Analytics Dashboard</div>
                        <div class="feature-desc">Comprehensive reporting, performance tracking, and content optimization insights</div>
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Generator Section -->
            <div class="generator-section">
                <div class="generator-header">
                    <h2>üöÄ Generate Enhanced Medical Blog</h2>
                    <p class="subtitle">Create professional medical content with AI images, videos, and interactive features</p>
                </div>
                
                <form id="blogForm">
                    <div class="form-layout">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="topic">
                                    <span class="label-icon">üè•</span>
                                    Medical Topic or Question
                                </label>
                                <input type="text" id="topic" name="topic" placeholder="e.g., What are the early signs of diabetes?" required>
                            </div>
                            <div class="form-group">
                                <label for="category">
                                    <span class="label-icon">üìã</span>
                                    Medical Category
                                </label>
                                <select id="category" name="category">
                                    <option value="">Auto-detect</option>
                                    <option value="cardiology">Cardiology</option>
                                    <option value="endocrinology">Endocrinology</option>
                                    <option value="neurology">Neurology</option>
                                    <option value="psychiatry">Mental Health</option>
                                    <option value="gynecology">Women's Health</option>
                                    <option value="pediatrics">Pediatrics</option>
                                    <option value="dermatology">Dermatology</option>
                                    <option value="gastroenterology">Digestive Health</option>
                                    <option value="pulmonology">Respiratory</option>
                                    <option value="general">General Medicine</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="form-group full-width">
                            <label for="keywords">
                                <span class="label-icon">üîç</span>
                                Target Keywords (comma-separated)
                            </label>
                            <textarea id="keywords" name="keywords" placeholder="diabetes symptoms, blood sugar, early signs, medical advice, health screening"></textarea>
                        </div>
                        
                        <!-- Enhanced Options -->
                        <div class="options-section">
                            <div class="options-title">
                                <span>üé®</span>
                                Content Enhancement Options
                            </div>
                            <div class="checkbox-group">
                                <label class="checkbox-item">
                                    <input type="checkbox" id="includeImages" checked>
                                    <div>
                                        <div class="checkbox-label">üñºÔ∏è AI-Generated Images</div>
                                        <div class="checkbox-desc">Professional medical illustrations</div>
                                    </div>
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" id="includeVideos" checked>
                                    <div>
                                        <div class="checkbox-label">üì∫ Video Integration</div>
                                        <div class="checkbox-desc">Curated educational videos</div>
                                    </div>
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" id="includeInteractive" checked>
                                    <div>
                                        <div class="checkbox-label">üéØ Interactive Elements</div>
                                        <div class="checkbox-desc">Symptom checkers and quizzes</div>
                                    </div>
                                </label>
                                <label class="checkbox-item">
                                    <input type="checkbox" id="includeSocial">
                                    <div>
                                        <div class="checkbox-label">üì± Social Sharing</div>
                                        <div class="checkbox-desc">Social media integration</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn-primary" id="generateBtn">
                            <span id="btnText">üöÄ Generate Enhanced Blog Post</span>
                        </button>
                    </div>
                </form>
                
                <!-- Enhanced Quick Topics -->
                <div class="quick-topics-section">
                    <div class="options-title">
                        <span>üí°</span>
                        Quick Topic Suggestions
                    </div>
                    
                    <div class="topics-filter">
                        <button type="button" class="filter-btn active" data-category="all">All Categories</button>
                        <button type="button" class="filter